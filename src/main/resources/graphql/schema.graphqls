type Query {
  VerifyAuthToken: Account
  getMyAccount: Account
  getJobSearchPhases: [ProcessElement!]!
  getJobSearchStatuses: [ProcessElement!]!
  getJobSearchTasks: [JobSearchTask!]!
  getJobSearchJobListings: [ProcessElement!]!
  getJobSearchCompanies: [ProcessElement!]!
}

type Subscription {
  newJobs: JobSearchTask
  ping: String
}

type Mutation {
  generateResetPasswordToken(email: String!): String!
  resetPassword(email: String!, password: String!, token: String!): Boolean!
  login(email: String!, password: String!): Account!

  signup(
      email: String!,
      password: String!,
      name: String!
    ): Account

  createJobListing(
    name: String
    label: String
    companyName: String
    location: String
    linkedinid: Long
    linkedinurl: String
    contracttype: String
    experiencelevel: String
    salary: String
    sector: String
    worktype: String
    publishedAt: DateTime
  ): JobListing

  createCompany(
    name: String
    label: String
    location: String
  ): ProcessElement

  createTask(
    name: String
    label: String
    location: String
    jobId: ID!
    companyId: ID!
  ): ProcessElement

}

scalar Long
scalar Url
scalar DateTime

directive @Pattern(regexp: String!) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type ClientCheckoutData {
  id: ID!,
  status: PaymentStatus!,
  checkoutToken: String!
}

enum PaymentStatus {
  APPROVED
  PENDING
}

type Account {
  id: ID!,
  email: String!
  roles: [String!]!
  authToken: String
}

type ProcessElement {
  id: ID!
  name: String
  label: String
}

type JobListing {
  id: ID!
  name: String
  label: String
  companyName: String
  location: String
  linkedinid: Long
  linkedinurl: String
  contracttype: String
  experiencelevel: String
  salary: String
  sector: String
  worktype: String
  publishedAt: DateTime
}

type JobSearchTask {
  id: ID!
  name: String
  label: String
  company: ProcessElement
  job: JobListing
  status: ProcessElement
}
